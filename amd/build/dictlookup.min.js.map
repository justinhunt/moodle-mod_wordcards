{"version":3,"file":"dictlookup.min.js","sources":["../src/dictlookup.js"],"sourcesContent":["/**\n * dictionary lookup\n *\n * @package mod_wordcards\n * @author  Justin Hunt - poodll.com\n * *\n */\n\ndefine(['jquery','core/log','core/ajax','core/templates'], function($,log,ajax,templates) {\n\n    \"use strict\"; // jshint ;_;\n\n    log.debug('Wordcards dictionary lookup: initialising');\n\n    return {\n        init: function (cmid,modid,resultscont) {\n            log.debug('Wordcards dictionary lookup: initialising');\n            this.cmid = cmid;\n            this.modid = modid;\n            this.resultscont = resultscont;\n        },\n\n        update_page: function(alldata){\n\n            //update the page\n            var that = this;\n            that.resultscont.empty();\n\n            for(var i = 0; i < alldata.length; i++)\n            {\n                var tdata = alldata[i];\n                templates.render('mod_wordcards/word_wizard_oneresult', tdata).then(\n                    function (html, js) {\n                        that.resultscont.append(html);\n                        templates.runTemplateJS(js);\n                    }\n                );\n            }\n        },\n\n        getwords: function (allwords,sourcelang,definitionslang) {\n            var that = this;\n\n            //if we have no words, do nothing\n            if (allwords.trim() === '') {\n                return false;\n            }\n        //originally we passed a single request with all words in a CSV list in the terms arg\n        //but that was too slow because the server would process them sequentially\n        // so now we make a request for each word. It would still work with a single request\n            var requests = [];\n            var wordarray = allwords.split(',');\n            for (var i = 0; i < wordarray.length; i++) {\n                var word = wordarray[i].trim();\n                if (word !== '') {\n                    requests.push({\n                        methodname: 'mod_wordcards_search_dictionary',\n                        args: {terms: word, cmid: that.cmid, sourcelang: sourcelang, targetlangs: definitionslang},\n                        async: false\n                    });\n                }\n            }\n\n            var wordpromises = ajax.call(requests);\n            Promise.all(wordpromises).then(async function(allresponses){\n                var allterms_result = [];\n                if(allresponses.length===0){\n                    return allterms_result;\n                }\n\n                for(var responseindex = 0; responseindex < allresponses.length; responseindex++) {\n\n                    var response = allresponses[responseindex];\n\n                    //if return code=0, disaster, log and continue\n                    if (response.success === 0) {\n                        log.debug(response.payload);\n                    }\n                    var terms = JSON.parse(response.payload);\n                    for (var i = 0; i < terms.length; i++) {\n                        var theterm = terms[i];\n                        //if a word search failed\n                        if (theterm.count === 0) {\n                            var senses = [];\n                            senses.push({\n                                definition: '', sourcedefinition: 'No def. available',\n                                modelsentence: '', senseindex: 0, translations: '{}'\n                            })\n                            var tdata = {term: theterm.term, senses: senses, modid: that.modid};\n                            allterms_result.push(tdata);\n\n                        } else {\n                            var tdata = {term: theterm.term, senses: [], modid: that.modid};\n                            for (var sindex in theterm.results) {\n                                var sense = theterm.results[sindex];\n                                //by default its term:English def:English\n                                var sourcedefinition = sense.definition;\n                                var alltrans = {};\n                                for (var langkey in sense) {\n                                    if (sense.hasOwnProperty(langkey) && langkey.startsWith('lang_')) {\n                                        alltrans[langkey.substring(5)] = sense[langkey];\n                                    }\n                                }\n\n                                var translations = JSON.stringify(alltrans);\n                                var definition = sourcedefinition;\n                                //if its NOT term:english and def:english, we pull the definition from the translation\n                                if (definitionslang !== \"en\") {\n                                    if (sense.hasOwnProperty('lang_' + definitionslang)) {\n                                        definition = sense['lang_' + definitionslang];\n                                    } else if (definitionslang === 'en') {\n                                        definition = sense.meaning;\n                                    } else {\n                                        definition = 'No translation available';\n                                    }\n                                }\n\n                                //model sentence)\n                                var modelsentence = sense.example;\n\n\n                                tdata.senses.push({\n                                    definition: definition, sourcedefinition: sourcedefinition,\n                                    modelsentence: modelsentence, senseindex: sindex, translations: translations\n                                });\n                            }//end of results loop\n                            allterms_result.push(tdata);\n                        }\n                    }//end of terms loop\n                }//end of allresponses loop\n                that.update_page(allterms_result );\n            });//end of promise then\n        },\n    }\n\n});\n\n"],"names":["define","$","log","ajax","templates","debug","init","cmid","modid","resultscont","update_page","alldata","that","this","empty","i","length","tdata","render","then","html","js","append","runTemplateJS","getwords","allwords","sourcelang","definitionslang","trim","requests","wordarray","split","word","push","methodname","args","terms","targetlangs","async","wordpromises","call","Promise","all","allresponses","allterms_result","responseindex","response","success","payload","JSON","parse","theterm","count","senses","definition","sourcedefinition","modelsentence","senseindex","translations","term","sindex","results","sense","alltrans","langkey","hasOwnProperty","startsWith","substring","stringify","meaning","example"],"mappings":"AAQAA,kCAAO,CAAC,SAAS,WAAW,YAAY,mBAAmB,SAASC,EAAEC,IAAIC,KAAKC,kBAI3EF,IAAIG,MAAM,6CAEH,CACHC,KAAM,SAAUC,KAAKC,MAAMC,aACvBP,IAAIG,MAAM,kDACLE,KAAOA,UACPC,MAAQA,WACRC,YAAcA,aAGvBC,YAAa,SAASC,aAGdC,KAAOC,KACXD,KAAKH,YAAYK,YAEb,IAAIC,EAAI,EAAGA,EAAIJ,QAAQK,OAAQD,IACnC,KACQE,MAAQN,QAAQI,GACpBX,UAAUc,OAAO,sCAAuCD,OAAOE,MAC3D,SAAUC,KAAMC,IACZT,KAAKH,YAAYa,OAAOF,MACxBhB,UAAUmB,cAAcF,SAMxCG,SAAU,SAAUC,SAASC,WAAWC,qBAChCf,KAAOC,QAGa,KAApBY,SAASG,cACF,UAKPC,SAAW,GACXC,UAAYL,SAASM,MAAM,KACtBhB,EAAI,EAAGA,EAAIe,UAAUd,OAAQD,IAAK,KACnCiB,KAAOF,UAAUf,GAAGa,OACX,KAATI,MACAH,SAASI,KAAK,CACVC,WAAY,kCACZC,KAAM,CAACC,MAAOJ,KAAMzB,KAAMK,KAAKL,KAAMmB,WAAYA,WAAYW,YAAaV,iBAC1EW,OAAO,QAKfC,aAAepC,KAAKqC,KAAKX,UAC7BY,QAAQC,IAAIH,cAAcpB,MAAKmB,eAAeK,kBACtCC,gBAAkB,MACG,IAAtBD,aAAa3B,cACL4B,oBAGP,IAAIC,cAAgB,EAAGA,cAAgBF,aAAa3B,OAAQ6B,gBAAiB,KAEzEC,SAAWH,aAAaE,eAGH,IAArBC,SAASC,SACT7C,IAAIG,MAAMyC,SAASE,iBAEnBZ,MAAQa,KAAKC,MAAMJ,SAASE,SACvBjC,EAAI,EAAGA,EAAIqB,MAAMpB,OAAQD,IAAK,KAC/BoC,QAAUf,MAAMrB,MAEE,IAAlBoC,QAAQC,MAAa,KACjBC,OAAS,GACbA,OAAOpB,KAAK,CACRqB,WAAY,GAAIC,iBAAkB,oBAClCC,cAAe,GAAIC,WAAY,EAAGC,aAAc,WAEhDzC,MAAQ,CAAC0C,KAAMR,QAAQQ,KAAMN,OAAQA,OAAQ7C,MAAOI,KAAKJ,OAC7DoC,gBAAgBX,KAAKhB,WAElB,CACCA,MAAQ,CAAC0C,KAAMR,QAAQQ,KAAMN,OAAQ,GAAI7C,MAAOI,KAAKJ,WACpD,IAAIoD,UAAUT,QAAQU,QAAS,KAC5BC,MAAQX,QAAQU,QAAQD,QAExBL,iBAAmBO,MAAMR,WACzBS,SAAW,OACV,IAAIC,WAAWF,MACZA,MAAMG,eAAeD,UAAYA,QAAQE,WAAW,WACpDH,SAASC,QAAQG,UAAU,IAAML,MAAME,cAI3CN,aAAeT,KAAKmB,UAAUL,UAC9BT,WAAaC,iBAEO,OAApB5B,kBAEI2B,WADAQ,MAAMG,eAAe,QAAUtC,iBAClBmC,MAAM,QAAUnC,iBACF,OAApBA,gBACMmC,MAAMO,QAEN,gCAKjBb,cAAgBM,MAAMQ,QAG1BrD,MAAMoC,OAAOpB,KAAK,CACdqB,WAAYA,WAAYC,iBAAkBA,iBAC1CC,cAAeA,cAAeC,WAAYG,OAAQF,aAAcA,eAGxEd,gBAAgBX,KAAKhB,SAIjCL,KAAKF,YAAYkC"}